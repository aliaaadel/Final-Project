
final_project_master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000350  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  00000350  000003e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800088  00800088  0000040c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000040c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000043c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ef6  00000000  00000000  00000548  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000088d  00000000  00000000  0000143e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000077c  00000000  00000000  00001ccb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000178  00000000  00000000  00002448  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000041a  00000000  00000000  000025c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000064c  00000000  00000000  000029da  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00003026  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e5       	ldi	r30, 0x50	; 80
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 38       	cpi	r26, 0x88	; 136
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e8       	ldi	r26, 0x88	; 136
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 38       	cpi	r26, 0x89	; 137
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 1c 01 	call	0x238	; 0x238 <main>
  8a:	0c 94 a6 01 	jmp	0x34c	; 0x34c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_enable>:



void LCD_enable(void){

	SetBit(LCD_CONTROL_PORT,LCD_E_PIN);
  92:	88 b3       	in	r24, 0x18	; 24
  94:	81 60       	ori	r24, 0x01	; 1
  96:	88 bb       	out	0x18, r24	; 24
  98:	08 95       	ret

0000009a <LCD_disable>:

}

void LCD_disable(void){

	ClearBit(LCD_CONTROL_PORT,LCD_E_PIN);
  9a:	88 b3       	in	r24, 0x18	; 24
  9c:	8e 7f       	andi	r24, 0xFE	; 254
  9e:	88 bb       	out	0x18, r24	; 24
  a0:	08 95       	ret

000000a2 <lcd_cmd>:

}

void lcd_cmd (char cmd)
{
  a2:	cf 93       	push	r28
  a4:	c8 2f       	mov	r28, r24
	// CMD 0000 0000
	ClearBit(LCD_CONTROL_PORT,LCD_RW_PIN);
  a6:	88 b3       	in	r24, 0x18	; 24
  a8:	8b 7f       	andi	r24, 0xFB	; 251
  aa:	88 bb       	out	0x18, r24	; 24
	ClearBit(LCD_CONTROL_PORT,LCD_RS_PIN);
  ac:	88 b3       	in	r24, 0x18	; 24
  ae:	8d 7f       	andi	r24, 0xFD	; 253
  b0:	88 bb       	out	0x18, r24	; 24
	LCD_DATA_PORT = cmd; // UPPER CMD
  b2:	cb bb       	out	0x1b, r28	; 27
	LCD_enable();
  b4:	0e 94 49 00 	call	0x92	; 0x92 <LCD_enable>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b8:	8f e9       	ldi	r24, 0x9F	; 159
  ba:	9f e0       	ldi	r25, 0x0F	; 15
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <lcd_cmd+0x1a>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <lcd_cmd+0x20>
  c2:	00 00       	nop
	_delay_ms(1);
	LCD_disable();
  c4:	0e 94 4d 00 	call	0x9a	; 0x9a <LCD_disable>
	if (flag){
  c8:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__data_end>
  cc:	88 23       	and	r24, r24
  ce:	79 f0       	breq	.+30     	; 0xee <lcd_cmd+0x4c>
		LCD_DATA_PORT =((cmd<<4) & 0xF0);// LOWER
  d0:	20 e1       	ldi	r18, 0x10	; 16
  d2:	c2 9f       	mul	r28, r18
  d4:	c0 01       	movw	r24, r0
  d6:	11 24       	eor	r1, r1
  d8:	8b bb       	out	0x1b, r24	; 27
		LCD_enable();
  da:	0e 94 49 00 	call	0x92	; 0x92 <LCD_enable>
  de:	8f e9       	ldi	r24, 0x9F	; 159
  e0:	9f e0       	ldi	r25, 0x0F	; 15
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <lcd_cmd+0x40>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <lcd_cmd+0x46>
  e8:	00 00       	nop
		_delay_ms(1);
		LCD_disable();
  ea:	0e 94 4d 00 	call	0x9a	; 0x9a <LCD_disable>
  ee:	8f e3       	ldi	r24, 0x3F	; 63
  f0:	9f e1       	ldi	r25, 0x1F	; 31
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <lcd_cmd+0x50>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <lcd_cmd+0x56>
  f8:	00 00       	nop
	}
	_delay_ms(2);
}
  fa:	cf 91       	pop	r28
  fc:	08 95       	ret

000000fe <lcd_WriteChar>:
void lcd_WriteChar(char c)
{
  fe:	cf 93       	push	r28
 100:	c8 2f       	mov	r28, r24
	// CMD 0000 0000
	ClearBit(LCD_CONTROL_PORT,LCD_RW_PIN);
 102:	88 b3       	in	r24, 0x18	; 24
 104:	8b 7f       	andi	r24, 0xFB	; 251
 106:	88 bb       	out	0x18, r24	; 24
	SetBit(LCD_CONTROL_PORT,LCD_RS_PIN);
 108:	88 b3       	in	r24, 0x18	; 24
 10a:	82 60       	ori	r24, 0x02	; 2
 10c:	88 bb       	out	0x18, r24	; 24
	LCD_DATA_PORT = c; // UPPER CMD
 10e:	cb bb       	out	0x1b, r28	; 27
	LCD_enable();
 110:	0e 94 49 00 	call	0x92	; 0x92 <LCD_enable>
 114:	8f e9       	ldi	r24, 0x9F	; 159
 116:	9f e0       	ldi	r25, 0x0F	; 15
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <lcd_WriteChar+0x1a>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <lcd_WriteChar+0x20>
 11e:	00 00       	nop
	_delay_ms(1);
	LCD_disable();
 120:	0e 94 4d 00 	call	0x9a	; 0x9a <LCD_disable>

	LCD_DATA_PORT =((c<<4) & 0xF0);// LOWER
 124:	20 e1       	ldi	r18, 0x10	; 16
 126:	c2 9f       	mul	r28, r18
 128:	c0 01       	movw	r24, r0
 12a:	11 24       	eor	r1, r1
 12c:	8b bb       	out	0x1b, r24	; 27
	LCD_enable();
 12e:	0e 94 49 00 	call	0x92	; 0x92 <LCD_enable>
 132:	8f e9       	ldi	r24, 0x9F	; 159
 134:	9f e0       	ldi	r25, 0x0F	; 15
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <lcd_WriteChar+0x38>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <lcd_WriteChar+0x3e>
 13c:	00 00       	nop
	_delay_ms(1);
	LCD_disable();
 13e:	0e 94 4d 00 	call	0x9a	; 0x9a <LCD_disable>
 142:	8f e3       	ldi	r24, 0x3F	; 63
 144:	9f e1       	ldi	r25, 0x1F	; 31
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <lcd_WriteChar+0x48>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <lcd_WriteChar+0x4e>
 14c:	00 00       	nop

	_delay_ms(2);
}
 14e:	cf 91       	pop	r28
 150:	08 95       	ret

00000152 <lcd_String>:

void lcd_String (char *str)		/* Send string to LCD function */
{
 152:	0f 93       	push	r16
 154:	1f 93       	push	r17
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
 15a:	8c 01       	movw	r16, r24
	int i=0;
 15c:	c0 e0       	ldi	r28, 0x00	; 0
 15e:	d0 e0       	ldi	r29, 0x00	; 0
	while(str[i] != '\0')		/* Send each char of string till the NULL */
 160:	03 c0       	rjmp	.+6      	; 0x168 <lcd_String+0x16>
	{
		lcd_WriteChar (str[i]);
 162:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_WriteChar>
		i++;
 166:	21 96       	adiw	r28, 0x01	; 1
}

void lcd_String (char *str)		/* Send string to LCD function */
{
	int i=0;
	while(str[i] != '\0')		/* Send each char of string till the NULL */
 168:	f8 01       	movw	r30, r16
 16a:	ec 0f       	add	r30, r28
 16c:	fd 1f       	adc	r31, r29
 16e:	80 81       	ld	r24, Z
 170:	81 11       	cpse	r24, r1
 172:	f7 cf       	rjmp	.-18     	; 0x162 <lcd_String+0x10>
	{
		lcd_WriteChar (str[i]);
		i++;
	}
}
 174:	df 91       	pop	r29
 176:	cf 91       	pop	r28
 178:	1f 91       	pop	r17
 17a:	0f 91       	pop	r16
 17c:	08 95       	ret

0000017e <lcd_SendStringPos>:
void lcd_SendStringPos(char* string,unsigned char line ,unsigned char pos){
 17e:	0f 93       	push	r16
 180:	1f 93       	push	r17
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
 186:	8c 01       	movw	r16, r24
 188:	d6 2f       	mov	r29, r22
 18a:	c4 2f       	mov	r28, r20
	lcd_cmd((0x02|0x04));
 18c:	86 e0       	ldi	r24, 0x06	; 6
 18e:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_cmd>
	switch (line)
 192:	d1 30       	cpi	r29, 0x01	; 1
 194:	19 f0       	breq	.+6      	; 0x19c <lcd_SendStringPos+0x1e>
 196:	d2 30       	cpi	r29, 0x02	; 2
 198:	51 f0       	breq	.+20     	; 0x1ae <lcd_SendStringPos+0x30>
 19a:	11 c0       	rjmp	.+34     	; 0x1be <lcd_SendStringPos+0x40>
	{
		case 1:
		lcd_cmd((0x80 | (pos&0x0F)));
 19c:	8c 2f       	mov	r24, r28
 19e:	8f 70       	andi	r24, 0x0F	; 15
 1a0:	80 68       	ori	r24, 0x80	; 128
 1a2:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_cmd>
		lcd_String(string);
 1a6:	c8 01       	movw	r24, r16
 1a8:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_String>
		break;
 1ac:	08 c0       	rjmp	.+16     	; 0x1be <lcd_SendStringPos+0x40>
		case 2:
		lcd_cmd((0xC0 | (pos&0x0F)));
 1ae:	8c 2f       	mov	r24, r28
 1b0:	8f 70       	andi	r24, 0x0F	; 15
 1b2:	80 6c       	ori	r24, 0xC0	; 192
 1b4:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_cmd>
		lcd_String(string);
 1b8:	c8 01       	movw	r24, r16
 1ba:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_String>
		break;
	}
}
 1be:	df 91       	pop	r29
 1c0:	cf 91       	pop	r28
 1c2:	1f 91       	pop	r17
 1c4:	0f 91       	pop	r16
 1c6:	08 95       	ret

000001c8 <LCD_init>:
void LCD_init(void){
	LCD_DATA_DIRECTION=0xFF;
 1c8:	8f ef       	ldi	r24, 0xFF	; 255
 1ca:	8a bb       	out	0x1a, r24	; 26
	LCD_CONTROL_DIRECTION=0xFF;
 1cc:	87 bb       	out	0x17, r24	; 23
	LCD_DATA_PORT = 0x00 ;
 1ce:	1b ba       	out	0x1b, r1	; 27
 1d0:	2f ef       	ldi	r18, 0xFF	; 255
 1d2:	89 ef       	ldi	r24, 0xF9	; 249
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	21 50       	subi	r18, 0x01	; 1
 1d8:	80 40       	sbci	r24, 0x00	; 0
 1da:	90 40       	sbci	r25, 0x00	; 0
 1dc:	e1 f7       	brne	.-8      	; 0x1d6 <LCD_init+0xe>
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <LCD_init+0x18>
 1e0:	00 00       	nop
	_delay_ms(20);

	lcd_cmd(0x20);
 1e2:	80 e2       	ldi	r24, 0x20	; 32
 1e4:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_cmd>
	lcd_cmd(0x20);
 1e8:	80 e2       	ldi	r24, 0x20	; 32
 1ea:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_cmd>
	lcd_cmd(0x80);
 1ee:	80 e8       	ldi	r24, 0x80	; 128
 1f0:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_cmd>
 1f4:	8f e9       	ldi	r24, 0x9F	; 159
 1f6:	9f e0       	ldi	r25, 0x0F	; 15
 1f8:	01 97       	sbiw	r24, 0x01	; 1
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <LCD_init+0x30>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <LCD_init+0x36>
 1fe:	00 00       	nop
	_delay_ms(1);
	lcd_cmd(0x00);
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_cmd>
	lcd_cmd(0xC0);
 206:	80 ec       	ldi	r24, 0xC0	; 192
 208:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_cmd>
 20c:	8f e9       	ldi	r24, 0x9F	; 159
 20e:	9f e0       	ldi	r25, 0x0F	; 15
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <LCD_init+0x48>
 214:	00 c0       	rjmp	.+0      	; 0x216 <LCD_init+0x4e>
 216:	00 00       	nop
	_delay_ms(1);
	lcd_cmd(0x00);
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_cmd>
	lcd_cmd(0x10);
 21e:	80 e1       	ldi	r24, 0x10	; 16
 220:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_cmd>
 224:	8f e3       	ldi	r24, 0x3F	; 63
 226:	9f e1       	ldi	r25, 0x1F	; 31
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <LCD_init+0x60>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <LCD_init+0x66>
 22e:	00 00       	nop

	_delay_ms(2);
	flag=1;
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__data_end>
 236:	08 95       	ret

00000238 <main>:
#include <util/delay.h>
#include "UART.h"
#include "LCD_4bit_driver.h"
int main(void)
{
	UART_Init();
 238:	0e 94 81 01 	call	0x302	; 0x302 <UART_Init>
	LCD_init();
 23c:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <LCD_init>
    DDRC |=((1<<2)|(1<<3));
 240:	84 b3       	in	r24, 0x14	; 20
 242:	8c 60       	ori	r24, 0x0C	; 12
 244:	84 bb       	out	0x14, r24	; 20
    SPI_Init(Master);
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	0e 94 62 01 	call	0x2c4	; 0x2c4 <SPI_Init>
	SlaveEn();
 24c:	88 b3       	in	r24, 0x18	; 24
 24e:	8f 7e       	andi	r24, 0xEF	; 239
 250:	88 bb       	out	0x18, r24	; 24
 252:	8f e3       	ldi	r24, 0x3F	; 63
 254:	9f e1       	ldi	r25, 0x1F	; 31
 256:	01 97       	sbiw	r24, 0x01	; 1
 258:	f1 f7       	brne	.-4      	; 0x256 <main+0x1e>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <main+0x24>
 25c:	00 00       	nop
    while (1)
    {
	    _delay_ms(2);
	    if(SPI_TxRx(0xAA)>= 70){
 25e:	8a ea       	ldi	r24, 0xAA	; 170
 260:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <SPI_TxRx>
 264:	86 34       	cpi	r24, 0x46	; 70
 266:	38 f1       	brcs	.+78     	; 0x2b6 <main+0x7e>
		    PORTC ^=(1<<2);
 268:	95 b3       	in	r25, 0x15	; 21
 26a:	84 e0       	ldi	r24, 0x04	; 4
 26c:	89 27       	eor	r24, r25
 26e:	85 bb       	out	0x15, r24	; 21
		    
			lcd_SendStringPos("FIRE!!",1,5);
 270:	45 e0       	ldi	r20, 0x05	; 5
 272:	61 e0       	ldi	r22, 0x01	; 1
 274:	80 e6       	ldi	r24, 0x60	; 96
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	0e 94 bf 00 	call	0x17e	; 0x17e <lcd_SendStringPos>
			lcd_SendStringPos("Send 1 for Buzzer",2,0);
 27c:	40 e0       	ldi	r20, 0x00	; 0
 27e:	62 e0       	ldi	r22, 0x02	; 2
 280:	87 e6       	ldi	r24, 0x67	; 103
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	0e 94 bf 00 	call	0x17e	; 0x17e <lcd_SendStringPos>
 288:	9f ef       	ldi	r25, 0xFF	; 255
 28a:	21 ee       	ldi	r18, 0xE1	; 225
 28c:	84 e0       	ldi	r24, 0x04	; 4
 28e:	91 50       	subi	r25, 0x01	; 1
 290:	20 40       	sbci	r18, 0x00	; 0
 292:	80 40       	sbci	r24, 0x00	; 0
 294:	e1 f7       	brne	.-8      	; 0x28e <main+0x56>
 296:	00 c0       	rjmp	.+0      	; 0x298 <main+0x60>
 298:	00 00       	nop
			_delay_ms(100);
			if (UART_RxChar()=='1'){
 29a:	0e 94 8f 01 	call	0x31e	; 0x31e <UART_RxChar>
 29e:	81 33       	cpi	r24, 0x31	; 49
 2a0:	51 f4       	brne	.+20     	; 0x2b6 <main+0x7e>
				PORTC |=(1<<3);
 2a2:	85 b3       	in	r24, 0x15	; 21
 2a4:	88 60       	ori	r24, 0x08	; 8
 2a6:	85 bb       	out	0x15, r24	; 21
				UART_TxString("FIRE\n\r");
 2a8:	89 e7       	ldi	r24, 0x79	; 121
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	0e 94 93 01 	call	0x326	; 0x326 <UART_TxString>
				lcd_cmd(0x01);
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_cmd>
			}
			
	    }
		
		lcd_SendStringPos("Normal",1,5);
 2b6:	45 e0       	ldi	r20, 0x05	; 5
 2b8:	61 e0       	ldi	r22, 0x01	; 1
 2ba:	80 e8       	ldi	r24, 0x80	; 128
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	0e 94 bf 00 	call	0x17e	; 0x17e <lcd_SendStringPos>
	    
    }
 2c2:	c7 cf       	rjmp	.-114    	; 0x252 <main+0x1a>

000002c4 <SPI_Init>:
 *  Author: aliaa
 */ 
#include "SPI.h"

void SPI_Init(SPI_StatusTypes status){
	switch(status){
 2c4:	88 23       	and	r24, r24
 2c6:	19 f0       	breq	.+6      	; 0x2ce <SPI_Init+0xa>
 2c8:	81 30       	cpi	r24, 0x01	; 1
 2ca:	69 f0       	breq	.+26     	; 0x2e6 <SPI_Init+0x22>
 2cc:	08 95       	ret
		case Master:
		DDRB|=((1<<SCK)|(1<<MOSI)|(1<<SS));
 2ce:	87 b3       	in	r24, 0x17	; 23
 2d0:	80 6b       	ori	r24, 0xB0	; 176
 2d2:	87 bb       	out	0x17, r24	; 23
		DDRB &= ~(1<<MISO);
 2d4:	87 b3       	in	r24, 0x17	; 23
 2d6:	8f 7b       	andi	r24, 0xBF	; 191
 2d8:	87 bb       	out	0x17, r24	; 23
		SlaveDis();
 2da:	88 b3       	in	r24, 0x18	; 24
 2dc:	80 61       	ori	r24, 0x10	; 16
 2de:	88 bb       	out	0x18, r24	; 24
		SPCR =((1<<SPE)|(1<<MSTR));
 2e0:	80 e5       	ldi	r24, 0x50	; 80
 2e2:	8d b9       	out	0x0d, r24	; 13
		
		break;
 2e4:	08 95       	ret
		case Slave:
		DDRB |=(1<<MISO);
 2e6:	87 b3       	in	r24, 0x17	; 23
 2e8:	80 64       	ori	r24, 0x40	; 64
 2ea:	87 bb       	out	0x17, r24	; 23
		DDRB &=~((1<<MOSI)|(1<<SCK)|(1<<SS));
 2ec:	87 b3       	in	r24, 0x17	; 23
 2ee:	8f 74       	andi	r24, 0x4F	; 79
 2f0:	87 bb       	out	0x17, r24	; 23
		SPCR =((1<<SPE));
 2f2:	80 e4       	ldi	r24, 0x40	; 64
 2f4:	8d b9       	out	0x0d, r24	; 13
 2f6:	08 95       	ret

000002f8 <SPI_TxRx>:
		break;
	}
}
unsigned char SPI_TxRx(unsigned char data){
	SPDR =data;
 2f8:	8f b9       	out	0x0f, r24	; 15
	while(!((SPSR>>SPIF)&1));
 2fa:	77 9b       	sbis	0x0e, 7	; 14
 2fc:	fe cf       	rjmp	.-4      	; 0x2fa <SPI_TxRx+0x2>
	return SPDR;
 2fe:	8f b1       	in	r24, 0x0f	; 15
 300:	08 95       	ret

00000302 <UART_Init>:
 */ 
#include "UART.h"


void UART_Init(){
	UCSRB |=((1<<RXEN)|(1<<TXEN));
 302:	8a b1       	in	r24, 0x0a	; 10
 304:	88 61       	ori	r24, 0x18	; 24
 306:	8a b9       	out	0x0a, r24	; 10
	UCSRC |=((1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1));
 308:	80 b5       	in	r24, 0x20	; 32
 30a:	86 68       	ori	r24, 0x86	; 134
 30c:	80 bd       	out	0x20, r24	; 32
	UBRRL = MyUBRR;
 30e:	87 e6       	ldi	r24, 0x67	; 103
 310:	89 b9       	out	0x09, r24	; 9
	UBRRH = (MyUBRR>>8);
 312:	10 bc       	out	0x20, r1	; 32
 314:	08 95       	ret

00000316 <UART_TxChar>:
}
void UART_TxChar( char data){
	while(!((UCSRA>>UDRE)&1));
 316:	5d 9b       	sbis	0x0b, 5	; 11
 318:	fe cf       	rjmp	.-4      	; 0x316 <UART_TxChar>
	UDR = data;
 31a:	8c b9       	out	0x0c, r24	; 12
 31c:	08 95       	ret

0000031e <UART_RxChar>:
}
char UART_RxChar(){
	while(!((UCSRA>>RXC)&1));
 31e:	5f 9b       	sbis	0x0b, 7	; 11
 320:	fe cf       	rjmp	.-4      	; 0x31e <UART_RxChar>
	return UDR;
 322:	8c b1       	in	r24, 0x0c	; 12
	
}
 324:	08 95       	ret

00000326 <UART_TxString>:
void UART_TxString(char* string){
 326:	0f 93       	push	r16
 328:	1f 93       	push	r17
 32a:	cf 93       	push	r28
 32c:	8c 01       	movw	r16, r24
	unsigned char i=0;
 32e:	c0 e0       	ldi	r28, 0x00	; 0
	while (string[i] != '\0'){
 330:	03 c0       	rjmp	.+6      	; 0x338 <UART_TxString+0x12>
		UART_TxChar(string[i]);
 332:	0e 94 8b 01 	call	0x316	; 0x316 <UART_TxChar>
		i++;
 336:	cf 5f       	subi	r28, 0xFF	; 255
	return UDR;
	
}
void UART_TxString(char* string){
	unsigned char i=0;
	while (string[i] != '\0'){
 338:	f8 01       	movw	r30, r16
 33a:	ec 0f       	add	r30, r28
 33c:	f1 1d       	adc	r31, r1
 33e:	80 81       	ld	r24, Z
 340:	81 11       	cpse	r24, r1
 342:	f7 cf       	rjmp	.-18     	; 0x332 <UART_TxString+0xc>
		UART_TxChar(string[i]);
		i++;
	}
	
}
 344:	cf 91       	pop	r28
 346:	1f 91       	pop	r17
 348:	0f 91       	pop	r16
 34a:	08 95       	ret

0000034c <_exit>:
 34c:	f8 94       	cli

0000034e <__stop_program>:
 34e:	ff cf       	rjmp	.-2      	; 0x34e <__stop_program>
