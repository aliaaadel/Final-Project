
final_project_master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  000003a2  00000436  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800086  00800086  0000045c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000045c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000048c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  000004c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f01  00000000  00000000  000005a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008a7  00000000  00000000  000014a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000798  00000000  00000000  00001d48  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d0  00000000  00000000  000024e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000471  00000000  00000000  000026b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000719  00000000  00000000  00002b21  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  0000323a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ea       	ldi	r30, 0xA2	; 162
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 38       	cpi	r26, 0x86	; 134
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e8       	ldi	r26, 0x86	; 134
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 38       	cpi	r26, 0x87	; 135
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 1c 01 	call	0x238	; 0x238 <main>
  8a:	0c 94 cf 01 	jmp	0x39e	; 0x39e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_enable>:
  92:	88 b3       	in	r24, 0x18	; 24
  94:	81 60       	ori	r24, 0x01	; 1
  96:	88 bb       	out	0x18, r24	; 24
  98:	08 95       	ret

0000009a <LCD_disable>:
  9a:	88 b3       	in	r24, 0x18	; 24
  9c:	8e 7f       	andi	r24, 0xFE	; 254
  9e:	88 bb       	out	0x18, r24	; 24
  a0:	08 95       	ret

000000a2 <lcd_cmd>:
  a2:	cf 93       	push	r28
  a4:	c8 2f       	mov	r28, r24
  a6:	88 b3       	in	r24, 0x18	; 24
  a8:	8b 7f       	andi	r24, 0xFB	; 251
  aa:	88 bb       	out	0x18, r24	; 24
  ac:	88 b3       	in	r24, 0x18	; 24
  ae:	8d 7f       	andi	r24, 0xFD	; 253
  b0:	88 bb       	out	0x18, r24	; 24
  b2:	cb bb       	out	0x1b, r28	; 27
  b4:	0e 94 49 00 	call	0x92	; 0x92 <LCD_enable>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b8:	8f e9       	ldi	r24, 0x9F	; 159
  ba:	9f e0       	ldi	r25, 0x0F	; 15
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <lcd_cmd+0x1a>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <lcd_cmd+0x20>
  c2:	00 00       	nop
  c4:	0e 94 4d 00 	call	0x9a	; 0x9a <LCD_disable>
  c8:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__data_end>
  cc:	88 23       	and	r24, r24
  ce:	79 f0       	breq	.+30     	; 0xee <lcd_cmd+0x4c>
  d0:	20 e1       	ldi	r18, 0x10	; 16
  d2:	c2 9f       	mul	r28, r18
  d4:	c0 01       	movw	r24, r0
  d6:	11 24       	eor	r1, r1
  d8:	8b bb       	out	0x1b, r24	; 27
  da:	0e 94 49 00 	call	0x92	; 0x92 <LCD_enable>
  de:	8f e9       	ldi	r24, 0x9F	; 159
  e0:	9f e0       	ldi	r25, 0x0F	; 15
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <lcd_cmd+0x40>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <lcd_cmd+0x46>
  e8:	00 00       	nop
  ea:	0e 94 4d 00 	call	0x9a	; 0x9a <LCD_disable>
  ee:	8f e3       	ldi	r24, 0x3F	; 63
  f0:	9f e1       	ldi	r25, 0x1F	; 31
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <lcd_cmd+0x50>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <lcd_cmd+0x56>
  f8:	00 00       	nop
  fa:	cf 91       	pop	r28
  fc:	08 95       	ret

000000fe <lcd_WriteChar>:
  fe:	cf 93       	push	r28
 100:	c8 2f       	mov	r28, r24
 102:	88 b3       	in	r24, 0x18	; 24
 104:	8b 7f       	andi	r24, 0xFB	; 251
 106:	88 bb       	out	0x18, r24	; 24
 108:	88 b3       	in	r24, 0x18	; 24
 10a:	82 60       	ori	r24, 0x02	; 2
 10c:	88 bb       	out	0x18, r24	; 24
 10e:	cb bb       	out	0x1b, r28	; 27
 110:	0e 94 49 00 	call	0x92	; 0x92 <LCD_enable>
 114:	8f e9       	ldi	r24, 0x9F	; 159
 116:	9f e0       	ldi	r25, 0x0F	; 15
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <lcd_WriteChar+0x1a>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <lcd_WriteChar+0x20>
 11e:	00 00       	nop
 120:	0e 94 4d 00 	call	0x9a	; 0x9a <LCD_disable>
 124:	20 e1       	ldi	r18, 0x10	; 16
 126:	c2 9f       	mul	r28, r18
 128:	c0 01       	movw	r24, r0
 12a:	11 24       	eor	r1, r1
 12c:	8b bb       	out	0x1b, r24	; 27
 12e:	0e 94 49 00 	call	0x92	; 0x92 <LCD_enable>
 132:	8f e9       	ldi	r24, 0x9F	; 159
 134:	9f e0       	ldi	r25, 0x0F	; 15
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <lcd_WriteChar+0x38>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <lcd_WriteChar+0x3e>
 13c:	00 00       	nop
 13e:	0e 94 4d 00 	call	0x9a	; 0x9a <LCD_disable>
 142:	8f e3       	ldi	r24, 0x3F	; 63
 144:	9f e1       	ldi	r25, 0x1F	; 31
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <lcd_WriteChar+0x48>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <lcd_WriteChar+0x4e>
 14c:	00 00       	nop
 14e:	cf 91       	pop	r28
 150:	08 95       	ret

00000152 <lcd_String>:
 152:	0f 93       	push	r16
 154:	1f 93       	push	r17
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
 15a:	8c 01       	movw	r16, r24
 15c:	c0 e0       	ldi	r28, 0x00	; 0
 15e:	d0 e0       	ldi	r29, 0x00	; 0
 160:	03 c0       	rjmp	.+6      	; 0x168 <lcd_String+0x16>
 162:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_WriteChar>
 166:	21 96       	adiw	r28, 0x01	; 1
 168:	f8 01       	movw	r30, r16
 16a:	ec 0f       	add	r30, r28
 16c:	fd 1f       	adc	r31, r29
 16e:	80 81       	ld	r24, Z
 170:	81 11       	cpse	r24, r1
 172:	f7 cf       	rjmp	.-18     	; 0x162 <lcd_String+0x10>
 174:	df 91       	pop	r29
 176:	cf 91       	pop	r28
 178:	1f 91       	pop	r17
 17a:	0f 91       	pop	r16
 17c:	08 95       	ret

0000017e <lcd_SendStringPos>:
 17e:	0f 93       	push	r16
 180:	1f 93       	push	r17
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
 186:	8c 01       	movw	r16, r24
 188:	d6 2f       	mov	r29, r22
 18a:	c4 2f       	mov	r28, r20
 18c:	86 e0       	ldi	r24, 0x06	; 6
 18e:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_cmd>
 192:	d1 30       	cpi	r29, 0x01	; 1
 194:	19 f0       	breq	.+6      	; 0x19c <lcd_SendStringPos+0x1e>
 196:	d2 30       	cpi	r29, 0x02	; 2
 198:	51 f0       	breq	.+20     	; 0x1ae <lcd_SendStringPos+0x30>
 19a:	11 c0       	rjmp	.+34     	; 0x1be <lcd_SendStringPos+0x40>
 19c:	8c 2f       	mov	r24, r28
 19e:	8f 70       	andi	r24, 0x0F	; 15
 1a0:	80 68       	ori	r24, 0x80	; 128
 1a2:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_cmd>
 1a6:	c8 01       	movw	r24, r16
 1a8:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_String>
 1ac:	08 c0       	rjmp	.+16     	; 0x1be <lcd_SendStringPos+0x40>
 1ae:	8c 2f       	mov	r24, r28
 1b0:	8f 70       	andi	r24, 0x0F	; 15
 1b2:	80 6c       	ori	r24, 0xC0	; 192
 1b4:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_cmd>
 1b8:	c8 01       	movw	r24, r16
 1ba:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_String>
 1be:	df 91       	pop	r29
 1c0:	cf 91       	pop	r28
 1c2:	1f 91       	pop	r17
 1c4:	0f 91       	pop	r16
 1c6:	08 95       	ret

000001c8 <LCD_init>:
 1c8:	8f ef       	ldi	r24, 0xFF	; 255
 1ca:	8a bb       	out	0x1a, r24	; 26
 1cc:	87 bb       	out	0x17, r24	; 23
 1ce:	1b ba       	out	0x1b, r1	; 27
 1d0:	2f ef       	ldi	r18, 0xFF	; 255
 1d2:	89 ef       	ldi	r24, 0xF9	; 249
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	21 50       	subi	r18, 0x01	; 1
 1d8:	80 40       	sbci	r24, 0x00	; 0
 1da:	90 40       	sbci	r25, 0x00	; 0
 1dc:	e1 f7       	brne	.-8      	; 0x1d6 <LCD_init+0xe>
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <LCD_init+0x18>
 1e0:	00 00       	nop
 1e2:	80 e2       	ldi	r24, 0x20	; 32
 1e4:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_cmd>
 1e8:	80 e2       	ldi	r24, 0x20	; 32
 1ea:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_cmd>
 1ee:	80 e8       	ldi	r24, 0x80	; 128
 1f0:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_cmd>
 1f4:	8f e9       	ldi	r24, 0x9F	; 159
 1f6:	9f e0       	ldi	r25, 0x0F	; 15
 1f8:	01 97       	sbiw	r24, 0x01	; 1
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <LCD_init+0x30>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <LCD_init+0x36>
 1fe:	00 00       	nop
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_cmd>
 206:	80 ec       	ldi	r24, 0xC0	; 192
 208:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_cmd>
 20c:	8f e9       	ldi	r24, 0x9F	; 159
 20e:	9f e0       	ldi	r25, 0x0F	; 15
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <LCD_init+0x48>
 214:	00 c0       	rjmp	.+0      	; 0x216 <LCD_init+0x4e>
 216:	00 00       	nop
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_cmd>
 21e:	80 e1       	ldi	r24, 0x10	; 16
 220:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_cmd>
 224:	8f e3       	ldi	r24, 0x3F	; 63
 226:	9f e1       	ldi	r25, 0x1F	; 31
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <LCD_init+0x60>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <LCD_init+0x66>
 22e:	00 00       	nop
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__data_end>
 236:	08 95       	ret

00000238 <main>:
#include "UART.h"
#include "LCD_4bit_driver.h"
#include <avr/interrupt.h>
int main(void)
{
	UART_Init();
 238:	0e 94 aa 01 	call	0x354	; 0x354 <UART_Init>
	LCD_init();
 23c:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <LCD_init>
    DDRC |=((1<<2)|(1<<3));
 240:	84 b3       	in	r24, 0x14	; 20
 242:	8c 60       	ori	r24, 0x0C	; 12
 244:	84 bb       	out	0x14, r24	; 20
    SPI_Init(Master);
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	0e 94 8b 01 	call	0x316	; 0x316 <SPI_Init>
	SlaveEn();
 24c:	88 b3       	in	r24, 0x18	; 24
 24e:	8f 7e       	andi	r24, 0xEF	; 239
 250:	88 bb       	out	0x18, r24	; 24
	sei();
 252:	78 94       	sei
 254:	8f e1       	ldi	r24, 0x1F	; 31
 256:	9e e4       	ldi	r25, 0x4E	; 78
 258:	01 97       	sbiw	r24, 0x01	; 1
 25a:	f1 f7       	brne	.-4      	; 0x258 <main+0x20>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <main+0x26>
 25e:	00 00       	nop
    while (1)
    {
		_delay_ms(5);
	    
	    if(SPI_TxRx(0xAA)>= 70){
 260:	8a ea       	ldi	r24, 0xAA	; 170
 262:	0e 94 a5 01 	call	0x34a	; 0x34a <SPI_TxRx>
 266:	86 34       	cpi	r24, 0x46	; 70
 268:	f8 f0       	brcs	.+62     	; 0x2a8 <main+0x70>
			if(SPI_TxRx(0xAA)>= 70){
 26a:	8a ea       	ldi	r24, 0xAA	; 170
 26c:	0e 94 a5 01 	call	0x34a	; 0x34a <SPI_TxRx>
 270:	86 34       	cpi	r24, 0x46	; 70
 272:	80 f3       	brcs	.-32     	; 0x254 <main+0x1c>
				PORTC ^=(1<<2);
 274:	95 b3       	in	r25, 0x15	; 21
 276:	84 e0       	ldi	r24, 0x04	; 4
 278:	89 27       	eor	r24, r25
 27a:	85 bb       	out	0x15, r24	; 21
				lcd_SendStringPos("FIRE!!",1,5);
 27c:	45 e0       	ldi	r20, 0x05	; 5
 27e:	61 e0       	ldi	r22, 0x01	; 1
 280:	80 e6       	ldi	r24, 0x60	; 96
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	0e 94 bf 00 	call	0x17e	; 0x17e <lcd_SendStringPos>
				lcd_SendStringPos("Send1 for Buzzer",2,0);
 288:	40 e0       	ldi	r20, 0x00	; 0
 28a:	62 e0       	ldi	r22, 0x02	; 2
 28c:	87 e6       	ldi	r24, 0x67	; 103
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	0e 94 bf 00 	call	0x17e	; 0x17e <lcd_SendStringPos>
 294:	9f ef       	ldi	r25, 0xFF	; 255
 296:	21 ee       	ldi	r18, 0xE1	; 225
 298:	84 e0       	ldi	r24, 0x04	; 4
 29a:	91 50       	subi	r25, 0x01	; 1
 29c:	20 40       	sbci	r18, 0x00	; 0
 29e:	80 40       	sbci	r24, 0x00	; 0
 2a0:	e1 f7       	brne	.-8      	; 0x29a <main+0x62>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <main+0x6c>
 2a4:	00 00       	nop
 2a6:	d6 cf       	rjmp	.-84     	; 0x254 <main+0x1c>
	    }
		
			
		
		else{
			lcd_SendStringPos("Normal",1,5);
 2a8:	45 e0       	ldi	r20, 0x05	; 5
 2aa:	61 e0       	ldi	r22, 0x01	; 1
 2ac:	88 e7       	ldi	r24, 0x78	; 120
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	0e 94 bf 00 	call	0x17e	; 0x17e <lcd_SendStringPos>
			PORTC &=~((1<<3)|(1<<2));
 2b4:	85 b3       	in	r24, 0x15	; 21
 2b6:	83 7f       	andi	r24, 0xF3	; 243
 2b8:	85 bb       	out	0x15, r24	; 21
 2ba:	cc cf       	rjmp	.-104    	; 0x254 <main+0x1c>

000002bc <__vector_13>:
		}
	    
    }
}

ISR(USART_RXC_vect){
 2bc:	1f 92       	push	r1
 2be:	0f 92       	push	r0
 2c0:	0f b6       	in	r0, 0x3f	; 63
 2c2:	0f 92       	push	r0
 2c4:	11 24       	eor	r1, r1
 2c6:	2f 93       	push	r18
 2c8:	3f 93       	push	r19
 2ca:	4f 93       	push	r20
 2cc:	5f 93       	push	r21
 2ce:	6f 93       	push	r22
 2d0:	7f 93       	push	r23
 2d2:	8f 93       	push	r24
 2d4:	9f 93       	push	r25
 2d6:	af 93       	push	r26
 2d8:	bf 93       	push	r27
 2da:	ef 93       	push	r30
 2dc:	ff 93       	push	r31
	if (UART_RxChar()=='1'){
 2de:	0e 94 b8 01 	call	0x370	; 0x370 <UART_RxChar>
 2e2:	81 33       	cpi	r24, 0x31	; 49
 2e4:	39 f4       	brne	.+14     	; 0x2f4 <__vector_13+0x38>
		PORTC |=(1<<3);
 2e6:	85 b3       	in	r24, 0x15	; 21
 2e8:	88 60       	ori	r24, 0x08	; 8
 2ea:	85 bb       	out	0x15, r24	; 21
		UART_TxString("FIRE\n\r");
 2ec:	8f e7       	ldi	r24, 0x7F	; 127
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	0e 94 bc 01 	call	0x378	; 0x378 <UART_TxString>
		}
 2f4:	ff 91       	pop	r31
 2f6:	ef 91       	pop	r30
 2f8:	bf 91       	pop	r27
 2fa:	af 91       	pop	r26
 2fc:	9f 91       	pop	r25
 2fe:	8f 91       	pop	r24
 300:	7f 91       	pop	r23
 302:	6f 91       	pop	r22
 304:	5f 91       	pop	r21
 306:	4f 91       	pop	r20
 308:	3f 91       	pop	r19
 30a:	2f 91       	pop	r18
 30c:	0f 90       	pop	r0
 30e:	0f be       	out	0x3f, r0	; 63
 310:	0f 90       	pop	r0
 312:	1f 90       	pop	r1
 314:	18 95       	reti

00000316 <SPI_Init>:
 316:	88 23       	and	r24, r24
 318:	19 f0       	breq	.+6      	; 0x320 <SPI_Init+0xa>
 31a:	81 30       	cpi	r24, 0x01	; 1
 31c:	69 f0       	breq	.+26     	; 0x338 <SPI_Init+0x22>
 31e:	08 95       	ret
 320:	87 b3       	in	r24, 0x17	; 23
 322:	80 6b       	ori	r24, 0xB0	; 176
 324:	87 bb       	out	0x17, r24	; 23
 326:	87 b3       	in	r24, 0x17	; 23
 328:	8f 7b       	andi	r24, 0xBF	; 191
 32a:	87 bb       	out	0x17, r24	; 23
 32c:	88 b3       	in	r24, 0x18	; 24
 32e:	80 61       	ori	r24, 0x10	; 16
 330:	88 bb       	out	0x18, r24	; 24
 332:	80 e5       	ldi	r24, 0x50	; 80
 334:	8d b9       	out	0x0d, r24	; 13
 336:	08 95       	ret
 338:	87 b3       	in	r24, 0x17	; 23
 33a:	80 64       	ori	r24, 0x40	; 64
 33c:	87 bb       	out	0x17, r24	; 23
 33e:	87 b3       	in	r24, 0x17	; 23
 340:	8f 74       	andi	r24, 0x4F	; 79
 342:	87 bb       	out	0x17, r24	; 23
 344:	80 e4       	ldi	r24, 0x40	; 64
 346:	8d b9       	out	0x0d, r24	; 13
 348:	08 95       	ret

0000034a <SPI_TxRx>:
 34a:	8f b9       	out	0x0f, r24	; 15
 34c:	77 9b       	sbis	0x0e, 7	; 14
 34e:	fe cf       	rjmp	.-4      	; 0x34c <SPI_TxRx+0x2>
 350:	8f b1       	in	r24, 0x0f	; 15
 352:	08 95       	ret

00000354 <UART_Init>:
 */ 
#include "UART.h"


void UART_Init(){
	UCSRB |=((1<<RXEN)|(1<<TXEN)|(1<<RXCIE));
 354:	8a b1       	in	r24, 0x0a	; 10
 356:	88 69       	ori	r24, 0x98	; 152
 358:	8a b9       	out	0x0a, r24	; 10
	UCSRC |=((1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1));
 35a:	80 b5       	in	r24, 0x20	; 32
 35c:	86 68       	ori	r24, 0x86	; 134
 35e:	80 bd       	out	0x20, r24	; 32
	UBRRL = MyUBRR;
 360:	87 e6       	ldi	r24, 0x67	; 103
 362:	89 b9       	out	0x09, r24	; 9
	UBRRH = (MyUBRR>>8);
 364:	10 bc       	out	0x20, r1	; 32
 366:	08 95       	ret

00000368 <UART_TxChar>:
}
void UART_TxChar( char data){
	while(!((UCSRA>>UDRE)&1));
 368:	5d 9b       	sbis	0x0b, 5	; 11
 36a:	fe cf       	rjmp	.-4      	; 0x368 <UART_TxChar>
	UDR = data;
 36c:	8c b9       	out	0x0c, r24	; 12
 36e:	08 95       	ret

00000370 <UART_RxChar>:
}
char UART_RxChar(){
	while(!((UCSRA>>RXC)&1));
 370:	5f 9b       	sbis	0x0b, 7	; 11
 372:	fe cf       	rjmp	.-4      	; 0x370 <UART_RxChar>
	return UDR;
 374:	8c b1       	in	r24, 0x0c	; 12
	
}
 376:	08 95       	ret

00000378 <UART_TxString>:
void UART_TxString(char* string){
 378:	0f 93       	push	r16
 37a:	1f 93       	push	r17
 37c:	cf 93       	push	r28
 37e:	8c 01       	movw	r16, r24
	unsigned char i=0;
 380:	c0 e0       	ldi	r28, 0x00	; 0
	while (string[i] != '\0'){
 382:	03 c0       	rjmp	.+6      	; 0x38a <UART_TxString+0x12>
		UART_TxChar(string[i]);
 384:	0e 94 b4 01 	call	0x368	; 0x368 <UART_TxChar>
		i++;
 388:	cf 5f       	subi	r28, 0xFF	; 255
	return UDR;
	
}
void UART_TxString(char* string){
	unsigned char i=0;
	while (string[i] != '\0'){
 38a:	f8 01       	movw	r30, r16
 38c:	ec 0f       	add	r30, r28
 38e:	f1 1d       	adc	r31, r1
 390:	80 81       	ld	r24, Z
 392:	81 11       	cpse	r24, r1
 394:	f7 cf       	rjmp	.-18     	; 0x384 <UART_TxString+0xc>
		UART_TxChar(string[i]);
		i++;
	}
	
}
 396:	cf 91       	pop	r28
 398:	1f 91       	pop	r17
 39a:	0f 91       	pop	r16
 39c:	08 95       	ret

0000039e <_exit>:
 39e:	f8 94       	cli

000003a0 <__stop_program>:
 3a0:	ff cf       	rjmp	.-2      	; 0x3a0 <__stop_program>
