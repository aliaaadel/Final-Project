
final_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000406  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000406  0000049a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080006e  0080006e  000004a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000514  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000eb6  00000000  00000000  000005dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000883  00000000  00000000  00001492  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007a0  00000000  00000000  00001d15  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000158  00000000  00000000  000024b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000436  00000000  00000000  00002610  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000063d  00000000  00000000  00002a46  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00003083  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e0       	ldi	r30, 0x06	; 6
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 37       	cpi	r26, 0x70	; 112
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 47 01 	call	0x28e	; 0x28e <main>
  8a:	0c 94 01 02 	jmp	0x402	; 0x402 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_Init>:
 * Created: 12/19/2020 6:13:12 PM
 *  Author: aliaa
 */ 
#include "ADC.h"
void ADC_Init(){
	ADMUX = (1<<REFS0)|(1<<REFS1);
  92:	80 ec       	ldi	r24, 0xC0	; 192
  94:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  96:	87 e8       	ldi	r24, 0x87	; 135
  98:	86 b9       	out	0x06, r24	; 6
  9a:	08 95       	ret

0000009c <ADC_Read>:
}
unsigned short ADC_Read(unsigned char channel){
	unsigned short data = 0;
	ADMUX |= (0b11100000 & ADMUX)|(channel & 0b00011111);
  9c:	27 b1       	in	r18, 0x07	; 7
  9e:	97 b1       	in	r25, 0x07	; 7
  a0:	20 7e       	andi	r18, 0xE0	; 224
  a2:	8f 71       	andi	r24, 0x1F	; 31
  a4:	82 2b       	or	r24, r18
  a6:	98 2b       	or	r25, r24
  a8:	97 b9       	out	0x07, r25	; 7
	ADCSRA |= (1<<ADSC);
  aa:	86 b1       	in	r24, 0x06	; 6
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	86 b9       	out	0x06, r24	; 6
	while(((ADCSRA>>ADIF)&1 ) == 0);
  b0:	34 9b       	sbis	0x06, 4	; 6
  b2:	fe cf       	rjmp	.-4      	; 0xb0 <ADC_Read+0x14>
	ADCSRA |= (1<<ADIF);
  b4:	86 b1       	in	r24, 0x06	; 6
  b6:	80 61       	ori	r24, 0x10	; 16
  b8:	86 b9       	out	0x06, r24	; 6
	data = ADCL;
  ba:	24 b1       	in	r18, 0x04	; 4
	data |= ADCH<<8;
  bc:	85 b1       	in	r24, 0x05	; 5
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	98 2f       	mov	r25, r24
  c2:	88 27       	eor	r24, r24
	
	return data;
}
  c4:	82 2b       	or	r24, r18
  c6:	08 95       	ret

000000c8 <LCD_enable>:



void LCD_enable(void){

	SetBit(LCD_CONTROL_PORT,LCD_E_PIN);
  c8:	88 b3       	in	r24, 0x18	; 24
  ca:	81 60       	ori	r24, 0x01	; 1
  cc:	88 bb       	out	0x18, r24	; 24
  ce:	08 95       	ret

000000d0 <LCD_disable>:

}

void LCD_disable(void){

	ClearBit(LCD_CONTROL_PORT,LCD_E_PIN);
  d0:	88 b3       	in	r24, 0x18	; 24
  d2:	8e 7f       	andi	r24, 0xFE	; 254
  d4:	88 bb       	out	0x18, r24	; 24
  d6:	08 95       	ret

000000d8 <lcd_cmd>:

}

void lcd_cmd (char cmd)
{
  d8:	cf 93       	push	r28
  da:	c8 2f       	mov	r28, r24
	// CMD 0000 0000
	ClearBit(LCD_CONTROL_PORT,LCD_RW_PIN);
  dc:	88 b3       	in	r24, 0x18	; 24
  de:	8b 7f       	andi	r24, 0xFB	; 251
  e0:	88 bb       	out	0x18, r24	; 24
	ClearBit(LCD_CONTROL_PORT,LCD_RS_PIN);
  e2:	88 b3       	in	r24, 0x18	; 24
  e4:	8d 7f       	andi	r24, 0xFD	; 253
  e6:	88 bb       	out	0x18, r24	; 24
	LCD_DATA_PORT = cmd; // UPPER CMD
  e8:	cb bb       	out	0x1b, r28	; 27
	LCD_enable();
  ea:	0e 94 64 00 	call	0xc8	; 0xc8 <LCD_enable>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ee:	8f e9       	ldi	r24, 0x9F	; 159
  f0:	9f e0       	ldi	r25, 0x0F	; 15
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <lcd_cmd+0x1a>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <lcd_cmd+0x20>
  f8:	00 00       	nop
	_delay_ms(1);
	LCD_disable();
  fa:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_disable>
	if (flag){
  fe:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end>
 102:	88 23       	and	r24, r24
 104:	79 f0       	breq	.+30     	; 0x124 <lcd_cmd+0x4c>
		LCD_DATA_PORT =((cmd<<4) & 0xF0);// LOWER
 106:	20 e1       	ldi	r18, 0x10	; 16
 108:	c2 9f       	mul	r28, r18
 10a:	c0 01       	movw	r24, r0
 10c:	11 24       	eor	r1, r1
 10e:	8b bb       	out	0x1b, r24	; 27
		LCD_enable();
 110:	0e 94 64 00 	call	0xc8	; 0xc8 <LCD_enable>
 114:	8f e9       	ldi	r24, 0x9F	; 159
 116:	9f e0       	ldi	r25, 0x0F	; 15
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <lcd_cmd+0x40>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <lcd_cmd+0x46>
 11e:	00 00       	nop
		_delay_ms(1);
		LCD_disable();
 120:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_disable>
 124:	8f e3       	ldi	r24, 0x3F	; 63
 126:	9f e1       	ldi	r25, 0x1F	; 31
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <lcd_cmd+0x50>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <lcd_cmd+0x56>
 12e:	00 00       	nop
	}
	_delay_ms(2);
}
 130:	cf 91       	pop	r28
 132:	08 95       	ret

00000134 <lcd_WriteChar>:
void lcd_WriteChar(char c)
{
 134:	cf 93       	push	r28
 136:	c8 2f       	mov	r28, r24
	// CMD 0000 0000
	ClearBit(LCD_CONTROL_PORT,LCD_RW_PIN);
 138:	88 b3       	in	r24, 0x18	; 24
 13a:	8b 7f       	andi	r24, 0xFB	; 251
 13c:	88 bb       	out	0x18, r24	; 24
	SetBit(LCD_CONTROL_PORT,LCD_RS_PIN);
 13e:	88 b3       	in	r24, 0x18	; 24
 140:	82 60       	ori	r24, 0x02	; 2
 142:	88 bb       	out	0x18, r24	; 24
	LCD_DATA_PORT = c; // UPPER CMD
 144:	cb bb       	out	0x1b, r28	; 27
	LCD_enable();
 146:	0e 94 64 00 	call	0xc8	; 0xc8 <LCD_enable>
 14a:	8f e9       	ldi	r24, 0x9F	; 159
 14c:	9f e0       	ldi	r25, 0x0F	; 15
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <lcd_WriteChar+0x1a>
 152:	00 c0       	rjmp	.+0      	; 0x154 <lcd_WriteChar+0x20>
 154:	00 00       	nop
	_delay_ms(1);
	LCD_disable();
 156:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_disable>

	LCD_DATA_PORT =((c<<4) & 0xF0);// LOWER
 15a:	20 e1       	ldi	r18, 0x10	; 16
 15c:	c2 9f       	mul	r28, r18
 15e:	c0 01       	movw	r24, r0
 160:	11 24       	eor	r1, r1
 162:	8b bb       	out	0x1b, r24	; 27
	LCD_enable();
 164:	0e 94 64 00 	call	0xc8	; 0xc8 <LCD_enable>
 168:	8f e9       	ldi	r24, 0x9F	; 159
 16a:	9f e0       	ldi	r25, 0x0F	; 15
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <lcd_WriteChar+0x38>
 170:	00 c0       	rjmp	.+0      	; 0x172 <lcd_WriteChar+0x3e>
 172:	00 00       	nop
	_delay_ms(1);
	LCD_disable();
 174:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_disable>
 178:	8f e3       	ldi	r24, 0x3F	; 63
 17a:	9f e1       	ldi	r25, 0x1F	; 31
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <lcd_WriteChar+0x48>
 180:	00 c0       	rjmp	.+0      	; 0x182 <lcd_WriteChar+0x4e>
 182:	00 00       	nop

	_delay_ms(2);
}
 184:	cf 91       	pop	r28
 186:	08 95       	ret

00000188 <lcd_String>:

void lcd_String (char *str)		/* Send string to LCD function */
{
 188:	0f 93       	push	r16
 18a:	1f 93       	push	r17
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
 190:	8c 01       	movw	r16, r24
	int i=0;
 192:	c0 e0       	ldi	r28, 0x00	; 0
 194:	d0 e0       	ldi	r29, 0x00	; 0
	while(str[i] != '\0')		/* Send each char of string till the NULL */
 196:	03 c0       	rjmp	.+6      	; 0x19e <lcd_String+0x16>
	{
		lcd_WriteChar (str[i]);
 198:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_WriteChar>
		i++;
 19c:	21 96       	adiw	r28, 0x01	; 1
}

void lcd_String (char *str)		/* Send string to LCD function */
{
	int i=0;
	while(str[i] != '\0')		/* Send each char of string till the NULL */
 19e:	f8 01       	movw	r30, r16
 1a0:	ec 0f       	add	r30, r28
 1a2:	fd 1f       	adc	r31, r29
 1a4:	80 81       	ld	r24, Z
 1a6:	81 11       	cpse	r24, r1
 1a8:	f7 cf       	rjmp	.-18     	; 0x198 <lcd_String+0x10>
	{
		lcd_WriteChar (str[i]);
		i++;
	}
}
 1aa:	df 91       	pop	r29
 1ac:	cf 91       	pop	r28
 1ae:	1f 91       	pop	r17
 1b0:	0f 91       	pop	r16
 1b2:	08 95       	ret

000001b4 <lcd_SendStringPos>:
void lcd_SendStringPos(char* string,unsigned char line ,unsigned char pos){
 1b4:	0f 93       	push	r16
 1b6:	1f 93       	push	r17
 1b8:	cf 93       	push	r28
 1ba:	df 93       	push	r29
 1bc:	8c 01       	movw	r16, r24
 1be:	d6 2f       	mov	r29, r22
 1c0:	c4 2f       	mov	r28, r20
	lcd_cmd((0x02|0x04));
 1c2:	86 e0       	ldi	r24, 0x06	; 6
 1c4:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_cmd>
	switch (line)
 1c8:	d1 30       	cpi	r29, 0x01	; 1
 1ca:	19 f0       	breq	.+6      	; 0x1d2 <lcd_SendStringPos+0x1e>
 1cc:	d2 30       	cpi	r29, 0x02	; 2
 1ce:	51 f0       	breq	.+20     	; 0x1e4 <lcd_SendStringPos+0x30>
 1d0:	11 c0       	rjmp	.+34     	; 0x1f4 <lcd_SendStringPos+0x40>
	{
		case 1:
		lcd_cmd((0x80 | (pos&0x0F)));
 1d2:	8c 2f       	mov	r24, r28
 1d4:	8f 70       	andi	r24, 0x0F	; 15
 1d6:	80 68       	ori	r24, 0x80	; 128
 1d8:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_cmd>
		lcd_String(string);
 1dc:	c8 01       	movw	r24, r16
 1de:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_String>
		break;
 1e2:	08 c0       	rjmp	.+16     	; 0x1f4 <lcd_SendStringPos+0x40>
		case 2:
		lcd_cmd((0xC0 | (pos&0x0F)));
 1e4:	8c 2f       	mov	r24, r28
 1e6:	8f 70       	andi	r24, 0x0F	; 15
 1e8:	80 6c       	ori	r24, 0xC0	; 192
 1ea:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_cmd>
		lcd_String(string);
 1ee:	c8 01       	movw	r24, r16
 1f0:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_String>
		break;
	}
}
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	1f 91       	pop	r17
 1fa:	0f 91       	pop	r16
 1fc:	08 95       	ret

000001fe <LCD_init>:
void LCD_init(void){
	LCD_DATA_DIRECTION=0xFF;
 1fe:	8f ef       	ldi	r24, 0xFF	; 255
 200:	8a bb       	out	0x1a, r24	; 26
	LCD_CONTROL_DIRECTION=0xFF;
 202:	87 bb       	out	0x17, r24	; 23
	LCD_DATA_PORT = 0x00 ;
 204:	1b ba       	out	0x1b, r1	; 27
 206:	2f ef       	ldi	r18, 0xFF	; 255
 208:	89 ef       	ldi	r24, 0xF9	; 249
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	21 50       	subi	r18, 0x01	; 1
 20e:	80 40       	sbci	r24, 0x00	; 0
 210:	90 40       	sbci	r25, 0x00	; 0
 212:	e1 f7       	brne	.-8      	; 0x20c <LCD_init+0xe>
 214:	00 c0       	rjmp	.+0      	; 0x216 <LCD_init+0x18>
 216:	00 00       	nop
	_delay_ms(20);

	lcd_cmd(0x20);
 218:	80 e2       	ldi	r24, 0x20	; 32
 21a:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_cmd>
	lcd_cmd(0x20);
 21e:	80 e2       	ldi	r24, 0x20	; 32
 220:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_cmd>
	lcd_cmd(0x80);
 224:	80 e8       	ldi	r24, 0x80	; 128
 226:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_cmd>
 22a:	8f e9       	ldi	r24, 0x9F	; 159
 22c:	9f e0       	ldi	r25, 0x0F	; 15
 22e:	01 97       	sbiw	r24, 0x01	; 1
 230:	f1 f7       	brne	.-4      	; 0x22e <LCD_init+0x30>
 232:	00 c0       	rjmp	.+0      	; 0x234 <LCD_init+0x36>
 234:	00 00       	nop
	_delay_ms(1);
	lcd_cmd(0x00);
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_cmd>
	lcd_cmd(0xC0);
 23c:	80 ec       	ldi	r24, 0xC0	; 192
 23e:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_cmd>
 242:	8f e9       	ldi	r24, 0x9F	; 159
 244:	9f e0       	ldi	r25, 0x0F	; 15
 246:	01 97       	sbiw	r24, 0x01	; 1
 248:	f1 f7       	brne	.-4      	; 0x246 <LCD_init+0x48>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <LCD_init+0x4e>
 24c:	00 00       	nop
	_delay_ms(1);
	lcd_cmd(0x00);
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_cmd>
	lcd_cmd(0x10);
 254:	80 e1       	ldi	r24, 0x10	; 16
 256:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_cmd>
 25a:	8f e3       	ldi	r24, 0x3F	; 63
 25c:	9f e1       	ldi	r25, 0x1F	; 31
 25e:	01 97       	sbiw	r24, 0x01	; 1
 260:	f1 f7       	brne	.-4      	; 0x25e <LCD_init+0x60>
 262:	00 c0       	rjmp	.+0      	; 0x264 <LCD_init+0x66>
 264:	00 00       	nop

	_delay_ms(2);
	flag=1;
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__data_end>
 26c:	08 95       	ret

0000026e <ServoAngle>:
		

	}
}
void ServoAngle( short angle){
	OCR1A = (long)(((MaxCount - MiniCount)*(angle-MiniAngle))/(MaxAngle-MiniAngle))+MiniCount-1;
 26e:	2a ef       	ldi	r18, 0xFA	; 250
 270:	ac 01       	movw	r20, r24
 272:	24 9f       	mul	r18, r20
 274:	c0 01       	movw	r24, r0
 276:	25 9f       	mul	r18, r21
 278:	90 0d       	add	r25, r0
 27a:	11 24       	eor	r1, r1
 27c:	64 eb       	ldi	r22, 0xB4	; 180
 27e:	70 e0       	ldi	r23, 0x00	; 0
 280:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <__divmodhi4>
 284:	67 50       	subi	r22, 0x07	; 7
 286:	7f 4f       	sbci	r23, 0xFF	; 255
 288:	7b bd       	out	0x2b, r23	; 43
 28a:	6a bd       	out	0x2a, r22	; 42
 28c:	08 95       	ret

0000028e <main>:
void ServoAngle(short angle);
unsigned char Flag =0;

int main(void)
{
	ADC_Init();
 28e:	0e 94 49 00 	call	0x92	; 0x92 <ADC_Init>
	LCD_init();
 292:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_init>
	DDRC |= ((1<<4)|(1<<3)|(1<<2)|(1<<7));
 296:	84 b3       	in	r24, 0x14	; 20
 298:	8c 69       	ori	r24, 0x9C	; 156
 29a:	84 bb       	out	0x14, r24	; 20
	DDRD |= (1<<5);
 29c:	81 b3       	in	r24, 0x11	; 17
 29e:	80 62       	ori	r24, 0x20	; 32
 2a0:	81 bb       	out	0x11, r24	; 17
	ICR1 = 4999;
 2a2:	87 e8       	ldi	r24, 0x87	; 135
 2a4:	93 e1       	ldi	r25, 0x13	; 19
 2a6:	97 bd       	out	0x27, r25	; 39
 2a8:	86 bd       	out	0x26, r24	; 38
	TCCR1A |= ((1<<COM1A1)|(1<<WGM11));
 2aa:	8f b5       	in	r24, 0x2f	; 47
 2ac:	82 68       	ori	r24, 0x82	; 130
 2ae:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= ((1<<WGM12)|(1<<CS11)|(1<<CS10)|(1<<WGM13));// n=64 - FPWM 8-bit  - non inverting - channelA
 2b0:	8e b5       	in	r24, 0x2e	; 46
 2b2:	8b 61       	ori	r24, 0x1B	; 27
 2b4:	8e bd       	out	0x2e, r24	; 46
	OCR1A =50;
 2b6:	82 e3       	ldi	r24, 0x32	; 50
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	9b bd       	out	0x2b, r25	; 43
 2bc:	8a bd       	out	0x2a, r24	; 42
	TCCR0 |= ((1<<WGM01)|(1<<WGM00)|(1<<COM01)|(1<<CS00)|(1<<CS01));
 2be:	83 b7       	in	r24, 0x33	; 51
 2c0:	8b 66       	ori	r24, 0x6B	; 107
 2c2:	83 bf       	out	0x33, r24	; 51
	OCR0= ((45/100)*265)-1; // Duty
 2c4:	8f ef       	ldi	r24, 0xFF	; 255
 2c6:	8c bf       	out	0x3c, r24	; 60
	SPI_Init(Slave);
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	0e 94 bd 01 	call	0x37a	; 0x37a <SPI_Init>

	unsigned short temp;
	
	while (1)
	{
		temp = ADC_Read(1);
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	0e 94 4e 00 	call	0x9c	; 0x9c <ADC_Read>
		temp /= 4;
 2d4:	ec 01       	movw	r28, r24
 2d6:	d6 95       	lsr	r29
 2d8:	c7 95       	ror	r28
 2da:	d6 95       	lsr	r29
 2dc:	c7 95       	ror	r28
		Flag=1;
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <Flag>
		while (temp >= 70){
 2e4:	31 c0       	rjmp	.+98     	; 0x348 <main+0xba>
			
			temp = ADC_Read(1);
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	0e 94 4e 00 	call	0x9c	; 0x9c <ADC_Read>
			temp /= 4;
 2ec:	ec 01       	movw	r28, r24
 2ee:	d6 95       	lsr	r29
 2f0:	c7 95       	ror	r28
 2f2:	d6 95       	lsr	r29
 2f4:	c7 95       	ror	r28
			lcd_SendStringPos("FIRE!!",1,5);
 2f6:	45 e0       	ldi	r20, 0x05	; 5
 2f8:	61 e0       	ldi	r22, 0x01	; 1
 2fa:	80 e6       	ldi	r24, 0x60	; 96
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_SendStringPos>
			if(Flag==1){
 302:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <Flag>
 306:	81 30       	cpi	r24, 0x01	; 1
 308:	89 f4       	brne	.+34     	; 0x32c <main+0x9e>
				if(SPI_TxRx(temp)==0xAA){
 30a:	8c 2f       	mov	r24, r28
 30c:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <SPI_TxRx>
 310:	8a 3a       	cpi	r24, 0xAA	; 170
 312:	61 f4       	brne	.+24     	; 0x32c <main+0x9e>
					PORTC^=(1<<7);
 314:	85 b3       	in	r24, 0x15	; 21
 316:	80 58       	subi	r24, 0x80	; 128
 318:	85 bb       	out	0x15, r24	; 21
 31a:	2f ef       	ldi	r18, 0xFF	; 255
 31c:	81 ee       	ldi	r24, 0xE1	; 225
 31e:	94 e0       	ldi	r25, 0x04	; 4
 320:	21 50       	subi	r18, 0x01	; 1
 322:	80 40       	sbci	r24, 0x00	; 0
 324:	90 40       	sbci	r25, 0x00	; 0
 326:	e1 f7       	brne	.-8      	; 0x320 <main+0x92>
 328:	00 c0       	rjmp	.+0      	; 0x32a <main+0x9c>
 32a:	00 00       	nop
					_delay_ms(100);
				}
			}
		PORTC ^=(1<<2);
 32c:	95 b3       	in	r25, 0x15	; 21
 32e:	84 e0       	ldi	r24, 0x04	; 4
 330:	89 27       	eor	r24, r25
 332:	85 bb       	out	0x15, r24	; 21
		ServoAngle(90);
 334:	8a e5       	ldi	r24, 0x5A	; 90
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	0e 94 37 01 	call	0x26e	; 0x26e <ServoAngle>
		PORTC |= (1<<4);
 33c:	85 b3       	in	r24, 0x15	; 21
 33e:	80 61       	ori	r24, 0x10	; 16
 340:	85 bb       	out	0x15, r24	; 21
		PORTC &=~ (1<<3);
 342:	85 b3       	in	r24, 0x15	; 21
 344:	87 7f       	andi	r24, 0xF7	; 247
 346:	85 bb       	out	0x15, r24	; 21
	while (1)
	{
		temp = ADC_Read(1);
		temp /= 4;
		Flag=1;
		while (temp >= 70){
 348:	c6 34       	cpi	r28, 0x46	; 70
 34a:	d1 05       	cpc	r29, r1
 34c:	60 f6       	brcc	.-104    	; 0x2e6 <main+0x58>
		PORTC ^=(1<<2);
		ServoAngle(90);
		PORTC |= (1<<4);
		PORTC &=~ (1<<3);
		}
		Flag=0;
 34e:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <Flag>
		lcd_SendStringPos("Normal",1,5);
 352:	45 e0       	ldi	r20, 0x05	; 5
 354:	61 e0       	ldi	r22, 0x01	; 1
 356:	87 e6       	ldi	r24, 0x67	; 103
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_SendStringPos>
		ServoAngle(0);
 35e:	80 e0       	ldi	r24, 0x00	; 0
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	0e 94 37 01 	call	0x26e	; 0x26e <ServoAngle>
		PORTC &=~ (1<<3);
 366:	85 b3       	in	r24, 0x15	; 21
 368:	87 7f       	andi	r24, 0xF7	; 247
 36a:	85 bb       	out	0x15, r24	; 21
		PORTC &=~ (1<<4);
 36c:	85 b3       	in	r24, 0x15	; 21
 36e:	8f 7e       	andi	r24, 0xEF	; 239
 370:	85 bb       	out	0x15, r24	; 21
		PORTC &=~(1<<2);
 372:	85 b3       	in	r24, 0x15	; 21
 374:	8b 7f       	andi	r24, 0xFB	; 251
 376:	85 bb       	out	0x15, r24	; 21
		

	}
 378:	aa cf       	rjmp	.-172    	; 0x2ce <main+0x40>

0000037a <SPI_Init>:
 *  Author: aliaa
 */ 
#include "SPI.h"

void SPI_Init(SPI_StatusTypes status){
	switch(status){
 37a:	88 23       	and	r24, r24
 37c:	19 f0       	breq	.+6      	; 0x384 <SPI_Init+0xa>
 37e:	81 30       	cpi	r24, 0x01	; 1
 380:	51 f0       	breq	.+20     	; 0x396 <SPI_Init+0x1c>
 382:	08 95       	ret
		case Master:
		DDRB|=((1<<SCK)|(1<<MOSI)|(1<<SS));
 384:	87 b3       	in	r24, 0x17	; 23
 386:	80 6b       	ori	r24, 0xB0	; 176
 388:	87 bb       	out	0x17, r24	; 23
		DDRB &= ~(1<<MISO);
 38a:	87 b3       	in	r24, 0x17	; 23
 38c:	8f 7b       	andi	r24, 0xBF	; 191
 38e:	87 bb       	out	0x17, r24	; 23
		SPCR =((1<<SPE)|(1<<MSTR));
 390:	80 e5       	ldi	r24, 0x50	; 80
 392:	8d b9       	out	0x0d, r24	; 13
		break;
 394:	08 95       	ret
		case Slave:
		DDRB |=(1<<MISO);
 396:	87 b3       	in	r24, 0x17	; 23
 398:	80 64       	ori	r24, 0x40	; 64
 39a:	87 bb       	out	0x17, r24	; 23
		DDRB &=~((1<<MOSI)|(1<<SCK)|(1<<SS));
 39c:	87 b3       	in	r24, 0x17	; 23
 39e:	8f 74       	andi	r24, 0x4F	; 79
 3a0:	87 bb       	out	0x17, r24	; 23
		SPCR =((1<<SPE));
 3a2:	80 e4       	ldi	r24, 0x40	; 64
 3a4:	8d b9       	out	0x0d, r24	; 13
 3a6:	08 95       	ret

000003a8 <SPI_TxRx>:
		break;
	}
}
unsigned char SPI_TxRx(unsigned char data){
	SPDR =data;
 3a8:	8f b9       	out	0x0f, r24	; 15
	while(!((SPSR>>SPIF)&1));
 3aa:	77 9b       	sbis	0x0e, 7	; 14
 3ac:	fe cf       	rjmp	.-4      	; 0x3aa <SPI_TxRx+0x2>
	return SPDR;
 3ae:	8f b1       	in	r24, 0x0f	; 15
 3b0:	08 95       	ret

000003b2 <__divmodhi4>:
 3b2:	97 fb       	bst	r25, 7
 3b4:	07 2e       	mov	r0, r23
 3b6:	16 f4       	brtc	.+4      	; 0x3bc <__divmodhi4+0xa>
 3b8:	00 94       	com	r0
 3ba:	07 d0       	rcall	.+14     	; 0x3ca <__divmodhi4_neg1>
 3bc:	77 fd       	sbrc	r23, 7
 3be:	09 d0       	rcall	.+18     	; 0x3d2 <__divmodhi4_neg2>
 3c0:	0e 94 ed 01 	call	0x3da	; 0x3da <__udivmodhi4>
 3c4:	07 fc       	sbrc	r0, 7
 3c6:	05 d0       	rcall	.+10     	; 0x3d2 <__divmodhi4_neg2>
 3c8:	3e f4       	brtc	.+14     	; 0x3d8 <__divmodhi4_exit>

000003ca <__divmodhi4_neg1>:
 3ca:	90 95       	com	r25
 3cc:	81 95       	neg	r24
 3ce:	9f 4f       	sbci	r25, 0xFF	; 255
 3d0:	08 95       	ret

000003d2 <__divmodhi4_neg2>:
 3d2:	70 95       	com	r23
 3d4:	61 95       	neg	r22
 3d6:	7f 4f       	sbci	r23, 0xFF	; 255

000003d8 <__divmodhi4_exit>:
 3d8:	08 95       	ret

000003da <__udivmodhi4>:
 3da:	aa 1b       	sub	r26, r26
 3dc:	bb 1b       	sub	r27, r27
 3de:	51 e1       	ldi	r21, 0x11	; 17
 3e0:	07 c0       	rjmp	.+14     	; 0x3f0 <__udivmodhi4_ep>

000003e2 <__udivmodhi4_loop>:
 3e2:	aa 1f       	adc	r26, r26
 3e4:	bb 1f       	adc	r27, r27
 3e6:	a6 17       	cp	r26, r22
 3e8:	b7 07       	cpc	r27, r23
 3ea:	10 f0       	brcs	.+4      	; 0x3f0 <__udivmodhi4_ep>
 3ec:	a6 1b       	sub	r26, r22
 3ee:	b7 0b       	sbc	r27, r23

000003f0 <__udivmodhi4_ep>:
 3f0:	88 1f       	adc	r24, r24
 3f2:	99 1f       	adc	r25, r25
 3f4:	5a 95       	dec	r21
 3f6:	a9 f7       	brne	.-22     	; 0x3e2 <__udivmodhi4_loop>
 3f8:	80 95       	com	r24
 3fa:	90 95       	com	r25
 3fc:	bc 01       	movw	r22, r24
 3fe:	cd 01       	movw	r24, r26
 400:	08 95       	ret

00000402 <_exit>:
 402:	f8 94       	cli

00000404 <__stop_program>:
 404:	ff cf       	rjmp	.-2      	; 0x404 <__stop_program>
